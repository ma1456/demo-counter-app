pipeline {
    agent any

    parameters{

        choice( name: 'action', choices: 'create\anddestroyekscluster', description: 'Create/update or destroy the eks cluster')
        string ( name: 'cluster ', defaultValue: ' demo-cluster ', description: 'eks cluster name')
        string ( name: 'region', defaultValue: ' us-west-2 ', description: 'eks cluster region')
    }

    environment{

        ACCESS_KEY = credentials( ' aws_access_key_id')
        SECRETE_KEY = credentials( ' aws_secrete_key_id')
    }

    stages{

        stage ('git checkout') {

            steps {
                git branch: 'main', url: 'https://github.com/ma1456/demo-counter-app.git'

            }

        }

        stage (' eks connect') {
            steps {
                sh """
                   aws configure set aws_access_key_id "$ACCESS_KEY"
                   aws configure set aws_secrete_access_key_id "$SECRETE_KEY"
                   aws configure set region ""
                   aws eks --region $(params.region) update-kubeconfig --name cluster_name $(params.cluster)
            }
        }
        stage ( 'eks deployment') {
            
            when { expression ( params.action =='create')}
            steps {
                script {
                    def apply = false
                    try {
                        input message: ' please confirm the apply to intiate the deployments', ok: ' Ready to apply the config'
                        apply = true
                    }
                    catch (err){
                        apply = false
                        CurrentBuild.result = ' UNSTABLE'
                    }
                    if(apply){

                        sh """
                        kubectl apply -f .
                        """;
                    }
                }

            }
        }
        stage ( 'Delete Deployments'){

            when ( expression {param.action == 'destroy'})
            steps {
                script{
                    def destroy = false
                    try {
                        input message: ' please confirm the destroy to delete the deployments', ok: ' Ready to destroy the config'
                    }
                    catch ( err ){
                        destroy = false
                        CurrentBuild.result = ' UNSTABLE'
                    }
                    if ( destroy ) {
                        sh """
                           kubectl delete -f .
                           """
                    }
                }
            }
        }
    }
}